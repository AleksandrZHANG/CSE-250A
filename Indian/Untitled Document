Branch Predictor Project
----------------------------------------------------------------------

Instructions:

1) Find the source code in this tar file (directory src) and cd
to that directory.

2) Make the predictor (run make in your working source directory).

3) Run the predictor
(bunzip2 -c -k ../traces/DIST-INT-1.bz2 | ./predictor)
where DIST-INT-1.bz is one of the trace files.
./predictor reads (in a binary format) from STDIN a trace
(decompressed with bzip2 on the fly). It outputs to STDOUT basic
statistics about how well the predictor did.

4) Create your own predictor.C file and predictor.h file (or modify
the existing ones).  Be sure to read the long comment at the beginning
of the provided predictor.h and follow it's directions.  Just make
sure your predictor implements the three functions exactly as their
specification reads (init_predictor, make_prediction, and
train_predictor).  The only two files of yours you will turn in are
predictor.h and predictor.C.  All other source files (and makefile)
will remain the same.


5) Submit your predictor.C and predictor.h files along with your
report (details of this specified on the webpage).  Email them to
Rajib (rknath@cs.ucsd.edu) with subject line: "CSE240A Project 1"














#ifndef PREDICTOR_H
#define PREDICTOR_H

/*
  Define all your tables and their sizes here.
  All tables must be statically-sized.
  Please don't call malloc () or any of its relatives within your
  program.  The predictor will have a budget, namely (32K + 256) bits
  (not bytes).  That encompasses all storage (all tables, plus GHR, if
  necessary -- but not PC) used for the predictor.  That may not be
  the amount of storage your predictor uses, however -- for example,
  you may implement 2-bit predictors with a table of ints, in which
  case the simulator will use more memory -- that's okay, we're only
  concerned about the memory used by the simulated branch predictor.
*/




/*
  Initialize the predictor.
*/
void init_predictor ();

/*
  Make a prediction for conditional branch instruction at PC 'pc'.
  Returning true indicates a prediction of taken; returning false
  indicates a prediction of not taken.
*/
bool make_prediction (unsigned int pc);

/*
  Train the predictor the last executed branch at PC 'pc' and with
  outcome 'outcome' (true indicates that the branch was taken, false
  indicates that the branch was not taken).
*/
void train_predictor (unsigned int pc, bool outcome);

#endif

